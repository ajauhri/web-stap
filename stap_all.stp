global parent_id = 0
global browser_id = 0

global store_kmalloc            //<1~name~pid~time~flags~ptr~bytes_alloc>
global store_kfree              //<2~name~pid~time~pointer~> 
global store_page_fault         //<3~name~pid~time~access_bool~freq> 1-write,0-read
global store_write_shared_copy  //<4~name~pid~time~address~freq>
global store_context_switches   //<5~name~pid~time~prev_pid~next_pid~freq>
global store_proc_wakeup        //<6~name~pid~time~task_pid~task_cpu~freq>
global store_block_io           //<7~name~pid~time~inode_of_mapped_file~bytes_done>
global store_process_or_thread  //<8~name~pid~time~thread_id~pid>
global store_msg_aio_read       //<9~name~pid~time~protocol~size>
global store_msg_aio_write      //<10~name~pid~time~protocol~size>
global store_socket_create      //<11~name~pid~time~freq>
global store_socket_close       //<12~name~pid~time~freq>
global store_tcp_send           //<13~name~pid~time~size>
global store_tcp_recv           //<14~name~pid~time~size>
global store_udp_send           //<15~name~pid~time~size>
global store_udp_recv           //<16~name~pid~time~size>
global store_syscalls           //<17~name~pid~time~name~freq>
global store_nw_recv            //<18~name~pid~time~bytes_recv>
global store_nw_sent            //<19~name~pid~time~bytes_sent>

probe vm.kmalloc
{   
   if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
       store_kmalloc[execname(), pid(), gettimeofday_s(), gfp_flag_name, ptr] += bytes_alloc
       }
}

probe vm.kfree
{   
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_kfree[execname(), pid(), gettimeofday_s(), ptr] += 1    
        }
}

probe vm.pagefault
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_page_fault[execname(), pid(), gettimeofday_s(), write_access] += 1
        }
}

probe vm.write_shared_copy
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_write_shared_copy[execname(), pid(), gettimeofday_s(), address] += 1
        }
}

probe scheduler.ctxswitch
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_context_switches[execname(), pid(), gettimeofday_s(), prev_pid, next_pid] += 1
        }
}

probe scheduler.wakeup
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_proc_wakeup[execname(), pid(), gettimeofday_s(), task_pid, task_cpu] += 1
        }
}

probe ioblock.end
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_block_io[execname(), pid(), gettimeofday_s(), ino] += bytes_done
    }
}

probe kprocess.create
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_process_or_thread[execname(), pid(), gettimeofday_s(), new_tid, new_pid] = 1
    }
}

probe socket.aio_read.return
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id) &&  success) {
        store_msg_aio_read[execname(), pid(), gettimeofday_s(), protocol] += size
    }
}

probe socket.aio_write.return
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id) && success) {
        store_msg_aio_write[execname(), pid(), gettimeofday_s(), protocol] += size
    }
}

probe socket.create.return
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_socket_create[execname(), pid(), gettimeofday_s()] += 1
    }
}
 
probe socket.close.return
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_socket_close[execname(), pid(), gettimeofday_s()] += 1
    }
}

probe tcp.sendmsg.return 
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id) && size>0) {
        store_tcp_send[execname(), pid(), gettimeofday_s()] += size
    }
}

       
probe tcp.recvmsg.return 
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id) && size>0) {
        store_tcp_recv[execname(), pid(), gettimeofday_s()] += size
    }
}

probe udp.sendmsg.return
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id) && size>0) {
        store_udp_send[execname(), pid(), gettimeofday_s()] += size
    }
}

probe udp.recvmsg.return
{
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id) && size>0) {
        store_udp_recv[execname(), pid(), gettimeofday_s()] += size
    }
}

probe syscall.* {
    if(pid() != parent_id && (ppid() == parent_id || ppid() == browser_id)) {
        store_syscalls[execname(), pid(), gettimeofday_s(), name] += 1
    }
}

probe netdev.receive
{
    store_nw_recv[execname(), pid(), gettimeofday_s(), dev_name] <<< length
}

probe netdev.transmit
{
    store_nw_sent[execname(), pid(), gettimeofday_s(), dev_name] <<< length
}

function print_all() {
    foreach ([exec, pid, ctime, flags, ptr] in store_kmalloc-) {
        printf("1~%s~%d~%lu~%s~%p~%d\n", exec, pid, ctime, flags, ptr, store_kmalloc[exec, pid, ctime, flags, ptr])
    }
    delete store_kmalloc

    foreach ([exec, pid, ctime, ptr] in store_kfree-) {
        printf("2~%s~%d~%lu~%p~0~0\n", exec, pid, ctime, ptr)
    }
    delete store_kfree

    foreach ([exec, pid, ctime, access] in store_page_fault-) {
        printf("3~%s~%d~%lu~%d~%d~0\n", exec, pid, ctime, access, store_page_fault[exec, pid, ctime, access])
    }
    delete store_page_fault
    
    foreach ([exec, pid, ctime, address] in store_write_shared_copy-) {
        printf("4~%s~%d~%lu~%p~%d~0\n", exec, pid, ctime, address, store_write_shared_copy[exec, pid, ctime, address])
    }
    delete store_write_shared_copy

    foreach ([exec, pid, ctime, prev_p, next_p] in store_context_switches-) {
        printf("5~%s~%d~%lu~%d~%d~%d\n", exec, pid, ctime, prev_p, next_p, store_context_switches[exec, pid, ctime, prev_p, next_p])
    }
    delete store_context_switches

    foreach ([exec, pid, ctime, task_p, task_c] in store_proc_wakeup-) {
        printf("6~%s~%d~%lu~%d~%lu~%d\n", exec, pid, ctime, task_p, task_c, store_proc_wakeup[exec, pid, ctime, task_p, task_c]);
    }
    delete store_proc_wakeup

    foreach ([exec, pid, ctime, ino] in store_block_io-) {
        printf("7~%s~%d~%lu~%d~%d~0\n", exec, pid, ctime, ino, store_block_io[exec, pid, ctime, ino])
    }
    delete store_block_io

    foreach ([exec, pid, ctime, tid, pid] in store_process_or_thread-) {
        printf("8~%s~%d~%lu~%d~%d~0\n", exec, pid, ctime, tid, pid);
    }
    delete store_process_or_thread
    
    foreach ([exec, pid, ctime, protocol] in store_msg_aio_read-) {
        printf("9~%s~%d~%lu~%d~%d~0\n", exec, pid, ctime, protocol, store_msg_aio_read[exec, pid, ctime, protocol]);
    }
    delete store_msg_aio_read

    foreach ([exec, pid, ctime, protocol] in store_msg_aio_write-) {
        printf("10~%s~%d~%lu~%d~%d~0\n", exec, pid, ctime, protocol, store_msg_aio_write[exec, pid, ctime, protocol]);
    }
    delete store_msg_aio_write

    foreach ([exec, pid, ctime] in store_socket_create-) {
        printf("11~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, store_socket_create[exec, pid, ctime]);
    }
    delete store_socket_create

    foreach ([exec, pid, ctime] in store_socket_close-) {
        printf("12~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, store_socket_close[exec, pid, ctime]);
    }
    delete store_socket_close

    foreach ([exec, pid, ctime] in store_tcp_send-) {
        printf("13~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, store_tcp_send[exec, pid, ctime]);
    }
    delete store_tcp_send

    foreach ([exec, pid, ctime] in store_tcp_recv-) {
        printf("14~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, store_tcp_recv[exec, pid, ctime]);
    }
    delete store_tcp_recv

    foreach ([exec, pid, ctime] in store_udp_send-) {
        printf("15~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, store_udp_send[exec, pid, ctime]);
    }
    delete store_udp_send

    foreach ([exec, pid, ctime] in store_udp_recv-) {
        printf("16~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, store_udp_recv[exec, pid, ctime]);
    }
    delete store_udp_recv
    
    foreach ([exec, pid, ctime, name] in store_syscalls-) {
        printf("17~%s~%d~%lu~%s~%d~0\n", exec, pid, ctime, name, store_syscalls[exec, pid, ctime, name]) 
    }
    delete store_syscalls

    foreach ([exec, pid, ctime, dev] in store_nw_recv) {
        if(dev=="wlan0") {
            printf("18~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, @sum(store_nw_recv[exec, pid, ctime, dev])) 
        }
    }
    delete store_nw_recv 
    
    foreach ([exec, pid, ctime, dev] in store_nw_sent) {
        if(dev=="wlan0") {
            printf("19~%s~%d~%lu~%d~0~0\n", exec, pid, ctime, @sum(store_nw_sent[exec, pid, ctime, dev])) 
            }
    }
    delete store_nw_sent
}


probe timer.s(1) {
    print_all()
}

